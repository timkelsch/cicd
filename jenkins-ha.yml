AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create ALB + jenkins server

Parameters:
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Specifies the AMI ID, using AL 2023 for arm64
    Default: ami-0085e579c65d43668
  InstanceType:
    Type: String
    Description: Specifies the EC2 instance type which is usually memory intensive 
    Default: t4g.small
  SshKeyPairName:
    Type: String
    Description: >
      Specifies the name of an existing Amazon EC2 key pair
      to enable SSH access to the EC2 instances in your cluster.
    Default: v1
  HostedZoneId:
    Type: String
    Description: ID of your hosted zone
    Default: Z07419102HFRMCTH28NVX
  Domain:
    Type: String
    Description: Domain name
    Default: timkelsch.com
  DomainPrefix:
    Description: Domain prefix of the URL for the jenkins server
    Type: String
    Default: jenkins
  SecurityGroupDescription:
    Description: Security Group Description
    Type: String
    Default: This is a description of the security group. It provides security.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: VPC
      InternetGatewayId: 
        Ref: InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 3
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 3
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: false

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 5
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: true

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 5
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  EC2Instance1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          jenkins_install:
            - setup_jenkins
        setup_jenkins:
          services:
            systemd:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
          commands:
            00_install_docker:
              command: dnf install docker -y
            00_start_docker:
              command: systemctl start docker && systemctl enable docker && systemctl status docker
            01_config_ec2-user:
              command: usermod -a -G docker ec2-user
            02_test_s3_download:
              command: !Join 
                - ''
                - - 'aws s3 cp s3://'
                  - !ImportValue CicdPipelineBucketName
                  - '/init-files/init.tgz /tmp/init.tgz'
            03_unpack:
              command: cd /tmp && tar --no-same-owner -zxvf init.tgz
            04_create_jenkins_dirs:
              command: mkdir -p /var/jenkins_home/{backup,install}
            05_copy_files:
              command: >
                mv /tmp/init-files/{restore.sh,backup.sh} /var/jenkins_home/backup/ && 
                ln -s /var/jenkins_home/backup/backup.sh /etc/cron.daily/ && 
                cp --preserve=mode /tmp/init-files/* /var/jenkins_home/install/
            06_chown_jenkins_dir:
              command: chown -R ec2-user:ec2-user /var/jenkins_home
            07_update_system:
              command: yum update -y
            08_create_docker_network:
              command: docker network create jenkins
            09_pull_docker_dind:
              command: docker image pull docker:dind
            10_run docker _dind:
              command: >
                docker run
                --name jenkins-docker
                --rm
                --detach
                --privileged
                --network jenkins
                --network-alias docker
                --env DOCKER_TLS_CERTDIR=/certs
                --volume jenkins-docker-certs:/certs/client
                --volume jenkins-data:/var/jenkins_home
                --publish 2376:2376
                docker:dind
                --storage-driver overlay2
            11_build_jenkins_docker_image:
              command: cd /var/jenkins_home/install/ && docker build -t jenkins:mfl .
            12_run_jenkins_docker_container:
              command: >
                docker run
                --name jenkins-mfl
                --restart=on-failure
                --detach
                --network jenkins
                --env DOCKER_HOST=tcp://docker:2376
                --env DOCKER_CERT_PATH=/certs/client
                --env DOCKER_TLS_VERIFY=1
                --publish 8080:8080
                --publish 50000:50000
                --volume jenkins-data:/var/jenkins_home
                --volume jenkins-docker-certs:/certs/client:ro
                jenkins:mfl
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: '13'
            DeleteOnTermination: 'true'
            Encrypted: 'true'
      KeyName: !Ref 'SshKeyPairName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              #!/bin/bash -xe
            - |
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource EC2Instance1 '
            - '         --configsets jenkins_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet1

  # EC2Instance2:
  #   Type: AWS::EC2::Instance
  #   Metadata:
  #     AWS::CloudFormation::Init:
  #       configSets:
  #         jenkins_install:
  #           - setup_jenkins
  #       setup_jenkins:
  #         services:
  #           systemd:
  #             docker:
  #               enabled: 'true'
  #               ensureRunning: 'true'
  #         commands:
  #           00_install_docker:
  #             command: dnf install docker -y
  #           00_start_docker:
  #             command: systemctl start docker && systemctl enable docker && systemctl status docker
  #           01_config_ec2-user:
  #             command: usermod -a -G docker ec2-user
  #           02_test_s3_download:
  #             command: !Join 
  #               - ''
  #               - - 'aws s3 cp s3://'
  #                 - !ImportValue CicdPipelineBucketName
  #                 - '/init-files/init.tgz /tmp/init.tgz'
  #           03_unpack:
  #             command: cd /tmp && tar --no-same-owner -zxvf init.tgz
  #           04_create_jenkins_dirs:
  #             command: mkdir -p /var/jenkins_home/{backup,install}
  #           05_copy_files:
  #             command: >
  #               mv /tmp/init-files/{restore.sh,backup.sh} /var/jenkins_home/backup/ && 
  #               ln -s /var/jenkins_home/backup/backup.sh /etc/cron.daily/ && 
  #               cp --preserve=mode /tmp/init-files/* /var/jenkins_home/install/
  #           06_chown_jenkins_dir:
  #             command: chown -R ec2-user:ec2-user /var/jenkins_home
  #           07_update_system:
  #             command: yum update -y
  #           08_create_docker_network:
  #             command: docker network create jenkins
  #           09_run_docker_dind:
  #             command: docker run \
  #               --name jenkins-docker \
  #               --rm \
  #               --detach \
  #               --privileged \
  #               --network jenkins \
  #               --network-alias docker \
  #               --env DOCKER_TLS_CERTDIR=/certs \
  #               --volume jenkins-docker-certs:/certs/client \
  #               --volume jenkins-data:/var/jenkins_home \
  #               --publish 2376:2376 \
  #               docker:dind \
  #               --storage-driver overlay2
  #           10_build_jenkins_docker_image:
  #             command: cd /var/jenkins_home/install/ && docker build -t jenkins:mfl .
  #           11_run_jenkins_docker_container:
  #             command: docker run \
  #               --name jenkins-blueocean \
  #               --restart=on-failure \
  #               --detach \
  #               --network jenkins \
  #               --env DOCKER_HOST=tcp://docker:2376 \
  #               --env DOCKER_CERT_PATH=/certs/client \
  #               --env DOCKER_TLS_VERIFY=1 \
  #               --publish 8080:8080 \
  #               --publish 50000:50000 \
  #               --volume jenkins-data:/var/jenkins_home \
  #               --volume jenkins-docker-certs:/certs/client:ro \
  #               jenkins:mfl
  #   Properties:
  #     ImageId: !Ref AmiId
  #     InstanceType: !Ref InstanceType
  #     IamInstanceProfile: !Ref InstanceProfile
  #     KeyName: !Ref 'SshKeyPairName'
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeType: gp3
  #           VolumeSize: '13'
  #           DeleteOnTermination: 'true'
  #           Encrypted: 'true'
  #     UserData: !Base64
  #       Fn::Join:
  #         - ''
  #         - - |
  #             #!/bin/bash -xe
  #           - |
  #           - '/opt/aws/bin/cfn-init -v '
  #           - '         --stack '
  #           - !Ref 'AWS::StackName'
  #           - '         --resource EC2Instance2 '
  #           - '         --configsets jenkins_install '
  #           - '         --region '
  #           - !Ref 'AWS::Region'
  #           - |+
  #     SecurityGroupIds:
  #       - !Ref EC2SecurityGroup
  #     SubnetId: !Ref PublicSubnet2

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "jenkins-profile"
      Roles: 
        - !Ref InstanceProfileRole

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  InstanceProfileRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      Roles: 
        - !Ref InstanceProfileRole
      PolicyName: allPolicies
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CloudFormationTemplate
            Effect: Allow
            Action:
            - cloudformation:CreateChangeSet
            Resource:
            - arn:aws:cloudformation:*:aws:transform/Serverless-2016-10-31
          - Effect: Allow
            Action: ecr:* # TODO: Narrow scope
            Resource: 
            # - !Sub arn:${AWS::Partition}:ecr:us-east-1:${AWS::AccountId}:repository/lambda-sam-go
            - !Sub arn:${AWS::Partition}:ecr:us-east-1:${AWS::AccountId}:repository/mfl-score
          - Effect: Allow
            Action: ecr:GetAuthorizationToken 
            Resource: '*'
          - Sid: CloudFormationStack
            Effect: Allow
            Action:
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteStack
            - cloudformation:DescribeChangeSet
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStacks
            - cloudformation:ExecuteChangeSet
            - cloudformation:GetTemplateSummary
            Resource:
            - !Sub arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/mfl-scoring
            - !Sub arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/mfl-scoring/*
          - Sid: S3read
            Effect: Allow
            Action:
            - s3:List*
            - s3:Get*
            Resource:
            - !ImportValue CicdPipelineBucketArn
            - !Join 
              -  ''
              - - !ImportValue CicdPipelineBucketArn
                - '/init-files/*'
          - Sid: S3write
            Effect: Allow
            Action:
            - s3:List*
            - s3:Get*
            # - s3:CreateMultipartUpload
            - s3:PutObject
            Resource:
            - !ImportValue CicdPipelineBucketArn
            - !Join 
              -  ''
              - - !ImportValue CicdPipelineBucketArn
                - '/jenkins-backups/*'
            - !ImportValue MflScoringBucketArn
            - !Join 
              -  ''
              - - !ImportValue MflScoringBucketArn
                - '/builds/*'
          - Sid: kmsUse
            Effect: Allow
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: !ImportValue StorageKeyArn
          - Sid: Create and List Lambda Function
            Effect: Allow
            Action:
            - lambda:CreateFunction
            - lambda:ListFunctions
            Resource:
            - !Sub arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:*
          - Sid: Lambda
            Effect: Allow
            Action:
            - lambda:AddPermission
            - lambda:DeleteFunction
            - lambda:GetFunction
            - lambda:GetFunctionConfiguration
            - lambda:ListFunctions
            - lambda:ListTags
            - lambda:RemovePermission
            - lambda:TagResource
            - lambda:UntagResource
            - lambda:UpdateAlias
            - lambda:UpdateFunctionCode
            - lambda:UpdateFunctionConfiguration
            Resource:
            -  !ImportValue MflScoringFunctionArn
          - Sid: CreateIAM
            Effect: Allow
            Action:
            - iam:CreateRole
            Resource:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
          - Sid: IAM
            Effect: Allow
            Action:
            - iam:AttachRolePolicy
            - iam:CreateRole
            - iam:DeleteRole
            - iam:DetachRolePolicy
            - iam:GetRole
            - iam:PassRole
            - iam:TagRole
            Resource:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/mfl-scoring-MflScoringFunctionIamRole-12ITGEOKQJ4LZ
          - Sid: APIGateway
            Effect: Allow
            Action:
            - apigateway:DELETE
            - apigateway:GET
            - apigateway:PATCH
            - apigateway:POST
            - apigateway:PUT
            Resource:
            - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/apis/a123456789/m2tgcwbr31

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: Allow HTTPS traffic in
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
        Description: Allow Jenkins traffic out

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref SecurityGroupDescription
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
        Description: Allow Jenkins traffic in
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
        Description: Allow SSH traffic in (mediocre idea)
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
        Description: Allow ICMP traffic in
      # SecurityGroupEgress:
      # - IpProtocol: tcp
      #   FromPort: 8080
      #   ToPort: 8080
      #   CidrIp: 0.0.0.0/0
      #   Description: Allow Jenkins traffic out

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      HealthCheckPath: '/login'
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref EC2Instance1
      # - Id: !Ref EC2Instance2
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref JenkinsCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-Res-2021-06

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId
      # LoadBalancerAttributes:
        # - Key: access_logs.s3.enabled
        #   Value: "true"
        # - Key: access_logs.s3.bucket
        #   Value: 
        # - Key: routing.http.drop_invalid_header_fields.enabled
        #   Value: "true"

  LoadBalancerCname:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Join [ ".", [ !Ref DomainPrefix, !Ref Domain ] ]
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - !GetAtt ApplicationLoadBalancer.DNSName

  JenkinsCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Join [ ".", [ !Ref DomainPrefix, !Ref Domain ] ]
      CertificateTransparencyLoggingPreference: DISABLED
      ValidationMethod: DNS

Outputs:
  LoadBalancerUrl:
    Description: URL of the ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName
