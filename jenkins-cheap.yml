AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to create jenkins server
Parameters:
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Specifies the AMI ID, using AL2 for arm64
    Default: ami-0571d1c0feed82a15
  InstanceType:
    Type: String
    Description: >
      Specifies the EC2 instance type for jenkins, which is memory intensive usually
      Defaults to m4.large
    Default: t4g.small
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Type: String
    Description: >
      Optional - Specifies the name of an existing Amazon EC2 key pair
      to enable SSH access to the EC2 instances in your cluster.
    Default: v1
  ConfigBucketName:
    Type: String
    Default: config-figgity-fuggity

Resources:
  EC2Instance1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          jenkins_install:
            - setup_jenkins
        setup_jenkins:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
          commands:
            00_start_docker:
              command: service docker start
            01_config_docker_user:
              command: usermod -a -G docker ec2-user
            02_chgrp_docker.sock:
              command: chgrp docker /var/run/docker.sock
            03_test_s3_download:
              command: !Sub aws s3 cp s3://${ConfigBucketName}/init.tgz /tmp/init.tgz
            04_unpack:
              command: cd /tmp && tar --no-same-owner -zxvf init.tgz && ls -l init-files
            05_create_jenkins_dirs:
              command: mkdir -p /var/jenkins_home/{backup,install}
            06_copy_files:
              command: >
                mv /tmp/init-files/backup.cron /etc/cron.d/ && 
                mv /tmp/init-files/{backup.sh,restore.sh} /var/jenkins_home/backup/ && 
                cp --preserve=mode /tmp/init-files/* /var/jenkins_home/install/
            07_chown_jenkins_dir:
              command: chown -R ec2-user:ec2-user /var/jenkins_home
            08_update_system:
              command: yum update -y
            09_build_jenkins_docker_image:
              command: cd /var/jenkins_home/install/ && DOCKER_BUILDKIT=1 docker build -t jenkins .
            10_start_jenkins_docker_container:
              command: >
                docker run -t --name jenkins --restart=on-failure --detach --publish 8080:8080 --publish 50000:50000 
                --volume jenkins-data:/var/jenkins_home --volume jenkins-docker-certs:/certs/client:ro 
                --volume /var/run/docker.sock:/var/run/docker.sock jenkins
              test: test $( docker ps -a | grep jenkins | wc -l ) -eq 0
            11_run_socket-fixer:
              command: cd /var/jenkins_home/install/ && ./socket-fixer.sh
            12_run_breadcrumb-fixer:
              command: cd /var/jenkins_home/install/ && ./breadcrumb-fixer.sh
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfileTest
      KeyName: !Ref 'KeyName'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: '15'
            DeleteOnTermination: 'true'
            Encrypted: 'true'
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              #!/bin/bash -xe
            - |
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource EC2Instance1 '
            - '         --configsets jenkins_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  InstanceProfileTest:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "jenkins-test-profile"
      Roles: 
        - !Ref InstanceProfileRoleTest

  InstanceProfileRoleTest:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  InstanceProfileRoleTestPoliciesTest:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CloudFormationTemplate
            Effect: Allow
            Action:
            - cloudformation:CreateChangeSet
            Resource:
            - arn:aws:cloudformation:*:aws:transform/Serverless-2016-10-31
          - Effect: Allow
            Action: ecr:*
            Resource: !Sub arn:aws:ecr:us-east-1:${AWS::AccountId}:repository/lambda-sam-go
          - Sid: CloudFormationStack
            Effect: Allow
            Action:
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteStack
            - cloudformation:DescribeChangeSet
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStacks
            - cloudformation:ExecuteChangeSet
            - cloudformation:GetTemplateSummary
            Resource:
            - !Sub arn:aws:cloudformation:*:${AWS::AccountId}:stack/mfl-scoring
            - !Sub arn:aws:cloudformation:*:${AWS::AccountId}:stack/mfl-scoring/*
          - Sid: S3read
            Effect: Allow
            Action:
            - s3:List*
            - s3:Get*
            Resource:
            - arn:aws:s3:::config-figgity-fuggity
            - arn:aws:s3:::config-figgity-fuggity/*
          - Sid: S3write
            Effect: Allow
            Action:
            - s3:List*
            - s3:Get*
            - s3:CreateMultipartUpload
            - s3:PutObject
            Resource:
            - arn:aws:s3:::my-jenkins-backup
            - arn:aws:s3:::my-jenkins-backup/*
            - arn:aws:s3:::aws-sam-cli-managed-default-samclisourcebucket-gjos7i7n8mbg
            - arn:aws:s3:::aws-sam-cli-managed-default-samclisourcebucket-gjos7i7n8mbg/*            
          - Sid: CreateLambda
            Effect: Allow
            Action:
            - lambda:CreateFunction
            Resource:
            - !Sub arn:aws:lambda:*:${AWS::AccountId}:function:*
          - Sid: Lambda
            Effect: Allow
            Action:
            - lambda:AddPermission
            - lambda:DeleteFunction
            - lambda:GetFunction
            - lambda:GetFunctionConfiguration
            - lambda:ListTags
            - lambda:RemovePermission
            - lambda:TagResource
            - lambda:UntagResource
            - lambda:UpdateFunctionCode
            - lambda:UpdateFunctionConfiguration
            Resource:
            - !ImportValue MflScoringFunctionArn
          - Sid: CreateIAM
            Effect: Allow
            Action:
            - iam:CreateRole
            Resource:
            - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: IAM
            Effect: Allow
            Action:
            - iam:AttachRolePolicy
            - iam:CreateRole
            - iam:DeleteRole
            - iam:DetachRolePolicy
            - iam:GetRole
            - iam:PassRole
            - iam:TagRole
            Resource:
            - !Sub arn:aws:iam::${AWS::AccountId}:role/mfl-scoring-MflScoringFunctionIamRole-12ITGEOKQJ4LZ
          - Sid: APIGateway
            Effect: Allow
            Action:
            - apigateway:DELETE
            - apigateway:GET
            - apigateway:PATCH
            - apigateway:POST
            - apigateway:PUT
            Resource:
            - !Sub arn:aws:apigateway:us-east-1:${AWS::AccountId}:/apis/a123456789/m2tgcwbr31
      Roles:
        - !Ref InstanceProfileRoleTest


  # InstanceProfileRoleTestPoliciesTest:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: AllowS3
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action: 's3:*'
  #           Resource: 
  #             - !GetAtt JenkinsBackUpBucket.Arn
  #     Roles:
  #       - !Ref InstanceProfileRoleTest

  # JenkinsBackUpBucket:
  #   Type: 'AWS::S3::Bucket'
  #   Properties:
  #     BucketName: !Ref BackupBucketName