AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to create ALB + jenkins server
Parameters:
  Environment:
    Description: Environment for Naming
    Type: String
    Default: dev
    ConstraintDescription: Must be a string.
  Urlname:
    Description: Will be the first portion of the URL for your jenkins server
    Type: String
    Default: jenkins
    ConstraintDescription: Must be a string.
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Specifies the AMI ID, using newest linux for us-east-1
    Default: ami-0fdcbfc2802f642d3
  InstanceType:
    Type: String
    Description: >
      Specifies the EC2 instance type for jenkins, which is memory intensive usually
      Defaults to m4.large
    Default: t4g.small
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Type: String
    Description: >
      Optional - Specifies the name of an existing Amazon EC2 key pair
      to enable SSH access to the EC2 instances in your cluster.
    Default: v1
  BucketName:
    Type: String
    Description: Name of s3 Backup bucket to load your jenkins content
    Default: my-jenkins-backup
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC id of the... VPC
    
Resources:

  Jenkins:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          jenkins_install:
            - setup_jenkins
        setup_jenkins:
          packages:
            yum:
              tmux: []
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
          files:
            /tmp/backup.txt:
              content: !Sub |
                * */5 * * * aws s3 sync /var/jenkins_home > s3://${BucketName}
              mode: "000644"
              owner: "root"
              group: "root"
            /tmp/Dockerfile:
              content:
                FROM jenkins/jenkins:lts-jdk11
                USER root
                RUN apt-get update && apt-get install -y lsb-release
                RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \
                  https://download.docker.com/linux/debian/gpg
                RUN echo "deb [arch=$(dpkg --print-architecture) \
                  signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
                  https://download.docker.com/linux/debian \
                  $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
                RUN apt-get update && apt-get install -y docker-ce-cli
                USER jenkins
                RUN jenkins-plugin-cli --plugins "blueocean docker-workflow"
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            01_install_docker:
              command: yum install -y docker
            02_make_jenkins_dir:
              command: mkdir -p /var/jenkins_home
            03_chown_jenkins_dir:
              command: chown 1000:1000 /var/jenkins_home
            04_config_docker_user:
              command: usermod -a -G docker ec2-user
            05_start_docker:
              command: service docker start
            06_start_docker_network:
              command: docker network create jenkins
            07_start_docker_dind:
              command: docker run -t --name jenkins-docker --rm --detach --privileged --network jenkins --network-alias docker \
                      --env DOCKER_TLS_CERTDIR=/certs --volume jenkins-docker-certs:/certs/client --volume jenkins-data:/var/jenkins_home \
                      --publish 2376:2376 docker:dind --storage-driver overlay2
            08_build_jenkins_docker_image:
              command: docker build -t myjenkins-blueocean:lts-jdk11 .
            09_start_jenkins_docker_container:
              command: docker run -t --name jenkins-blueocean --restart=on-failure --detach --network jenkins --env DOCKER_HOST=tcp://docker:2376 \
                      --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 --publish 8080:8080 --publish 50000:50000 \
                      --volume jenkins-data:/var/jenkins_home --volume jenkins-docker-certs:/certs/client:ro myjenkins-blueocean:lts-jdk11
              test: docker ps -a | grep -v jenkins
            10_backup_jenkins:
              command: crontab /tmp/backup.txt
              test: crontab -l
    Properties:
      Tags:
        - Key: stack
          Value: !Ref Environment
        - Key: app
          Value: jenkins
        - Key: Name
          Value: !Join [ "-", [ !Ref Urlname, !Ref Environment ] ]
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref JenkinsSecurityGroup
      KeyName: !Ref 'KeyName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              #!/bin/bash -xe
            - |
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource Jenkins '
            - '         --configsets jenkins_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
  
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "jenkins-profile"
      Roles: 
        - !Ref InstanceProfileRole

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  InstanceProfileRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: !GetAtt JenkinsBackUpBucket.Arn
      Roles:
        - !Ref InstanceProfileRole

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Subnets:
      - !Ref PrivateAz1Subnet
      Scheme: internal
      SecurityGroups: 
      - !Ref JenkinsSecurityGroup 

  PrivateAz1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1d
      CidrBlock: 172.31.32.0/20
      VpcId: !Ref VpcId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      Conditions:
      - Field: path-pattern
        Values:
        - "/"
      ListenerArn:
        Ref: Listener
      Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Name: Jenkins
      Port: 80
      Protocol: HTTP
      Targets:
      - Id:
          Ref: Jenkins
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId

  LoadBalancerCname:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Join [ ".", [ !Ref Urlname, !Ref Environment, !Ref RootDomain ] ]
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - !GetAtt LoadBalancer.DNSName

  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-security-group, !Ref Environment]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Jenkins
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Urlname, !Ref Environment]]

  JenkinsBackUpBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      Tags:
        - Key: stack
          Value: !Ref Environment
        - Key: app
          Value: jenkins
 
Outputs:
  EC2Ip:
    Value: !Ref WebAppEIP
    Description: Elastic IP of the Jenkins EC2 instance